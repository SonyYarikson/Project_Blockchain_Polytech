
# МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ 
**ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ АВТОНОМНОЕ ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ  
ВЫСШЕГО ОБРАЗОВАНИЯ**  

{width="1.2in"}  
**МОСКОВСКИЙ ПОЛИТЕХНИЧЕСКИЙ УНИВЕРСИТЕТ**  

**Факультет информационных технологий**  
**Кафедра Информатики и информационных технологий**  

**Направление подготовки:**  
09.03.02 «Информационные системы и технологии»  

---

# ПРОЕКТ 
**Тема:** «Blockchain / Cryptocurrency»  
**по дисциплине:** «Проектная деятельность»  

**Выполнили:**  
- Бабкин Ярослав Васильевич  
- Симонин Евгений Алексеевич  
- Иванов Илья Алексеевич  
*Группа ИСИТ 241-337*  

**Москва, 2025**  

---

## 1. Введение 

### 1.1 Цель проекта 
Разработка учебного блокчейн-приложения для демонстрации:  
- Основ распределённых реестров  
- Механизма майнинга (PoW)  
- Обработки транзакций  
- Синхронизации узлов  

### 1.2 Задачи 
- Реализация базового блокчейна  
- Создание механизма майнинга  
- Разработка системы транзакций  
- Реализация GUI интерфейса  
- Тестирование работы сети  

---

## 2. Технологический стек 

```python
import hashlib
import ecdsa  # Для криптографии
from flask import Flask  # Для API
import tkinter as tk  # Для интерфейса
```
---
## 3. Реализация

### 3.1 Архитектура системы

{width="1.6in"}

### 3.2 Основные функции

#### Создание транзакций:

```python
def send_transaction(self):
    recipient = self.recipient_entry.get()
    try:
        amount = float(self.amount_entry.get())
    except:
        messagebox.showerror("Error", "Invalid amount")
        return
      
    tx = Transaction(self.public_key, recipient, amount)
    tx.sign(self.private_key)
    
    if self.blockchain.add_transaction(tx):
        messagebox.showinfo("Success", "Transaction added to pending")
        self.broadcast_transaction(tx)
        self.update_data()
    else:
        messagebox.showerror("Error", "Failed to add transaction")
  ```

{width="6.5in"}

#### Майнинг блока:

```python
def mine_block(self):
    if self.blockchain.mine_pending_transactions(self.public_key):
        messagebox.showinfo("Success", "New block mined!")
        self.broadcast_block()
        self.update_data()
    else:
        messagebox.showerror("Error", "No transactions to mine")
```
{width="6.5in"}

----------

## 4. Инструкция по запуску

### 4.1 Установка зависимостей

pip install -r requirements.txt

### 4.2 Запуск узлов


`python node.py 5000`

Запуск первого узла

`python node.py 5001`

Запуск второго узла

----------

## 5. Результаты тестирования

### 5.1 Проверенные сценарии

1.  Отправка транзакций между узлами
    
2.  Майнинг блоков с разной сложностью
    
3.  Автоматическая синхронизация
    

### 5.2 Производительность

Параметр

Значение

Время майнинга (difficulty=2)

~3.5 сек

Скорость транзакций

15 tx/sec

----------

## 6. Выводы

**Достигнутые результаты:**

-   Создана рабочая блокчейн-сеть из 2+ узлов
    
-   Реализован базовый функционал криптокошелька
    
-   Обеспечена синхронизация данных
    

**Перспективы развития:**

-   Добавление смарт-контрактов
    
-   Улучшение механизма консенсуса
    
-   Оптимизация производительности
    
-   Добавление интерфейса
